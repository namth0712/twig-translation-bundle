<?xml version="1.0"?>
<ruleset name="Custom Standard">
    <arg name="extensions" value="php"/>
    <exclude-pattern>vendor/</exclude-pattern>


    <rule ref="PSR2">
        <exclude name="Generic.Files.LineLength"/>
        <exclude name="Generic.Files.LineEndings.InvalidEOLChar" />
        <!--<exclude name="PSR1.Classes.ClassDeclaration"/>-->
    </rule>
    <!-- Don't hide tokenizer exceptions -->
    <rule ref="Internal.Tokenizer.Exception">
        <type>error</type>
    </rule>

    <!-- Include the whole PEAR standard -->
    <!--<rule ref="PEAR">
        <exclude name="PEAR.NamingConventions.ValidFunctionName"/>
        <exclude name="PEAR.NamingConventions.ValidVariableName"/>
        <exclude name="PEAR.Commenting.ClassComment"/>
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingVersion"/>
        <exclude name="PEAR.Commenting.InlineComment"/>
    </rule>-->

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <!--<rule ref="Squiz.Arrays.ArrayDeclaration"/>-->
    <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration.NotAllowed">
        <severity>0</severity>
    </rule>
    <!--<rule ref="Squiz.Commenting.BlockComment"/>-->
    <!--<rule ref="Squiz.Commenting.DocCommentAlignment"/>-->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.InlineComment"/>
    <rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.InlineComment.NotCapital">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Commenting.LongConditionClosingComment"/>
    <!--<rule ref="Squiz.Commenting.PostStatementComment"/>-->
    <!--<rule ref="Squiz.Commenting.VariableComment"/>-->
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <!--<property name="requiredSpacesAfterOpen" value="1"/>-->
        </properties>
        <!--<exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeEquals"/>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceAfterDefault"/>-->
    </rule>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage.NotAllowed">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    <rule ref="Squiz.PHP.DisallowInlineIf.Found">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Scope.MethodScope"/>
    <!--<rule ref="Squiz.Strings.ConcatenationSpacing"/>-->
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.NoLineAfterClose">
        <severity>1</severity>
    </rule>
    <!--<rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace"/>-->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"></property>
            <property name="spacingBeforeFirst" value="0"></property>
            <property name="spacingAfterLast" value="0"></property>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <!--<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>-->
    <!--<rule ref="Generic.Commenting.Todo"/>-->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <!--<rule ref="Generic.Strings.UnnecessaryStringConcat"/>-->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="Zend.Files.ClosingTag"/>

    <!-- ThanhDT custom -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName"/>
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!-- PEAR uses warnings for inline control structures, so switch back to errors -->
    <rule ref="Generic.ControlStructures.InlineControlStructure">
        <properties>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <!-- Have 12 chars padding maximum and always show as errors -->
    <!--<rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="12"/>
            <property name="error" value="true"/>
        </properties>
    </rule>-->

    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- Private methods MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
    </rule>

    <!-- Private properties MUST not be prefixed with an underscore -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore">
        <type>error</type>
    </rule>
</ruleset>